[tox]
requires = tox>=4
skipsdist = True
env_list = linters,py{310,311,312,313}
labels =
    from_ci = ci-linters,ci-py{310,311,312,313}
    linters_from_ci = ci-linters
    tests_from_ci = ci-py{310,311,312,313}


[testenv]
ignore_errors = True


[testenv:{,ci-}linters]
allowlist_externals =
    rm
    mkdir
deps =
            {[testenv:black]deps}
    ci:     {[testenv:ci-flake8]deps}
    !ci:    {[testenv:flake8]deps}
commands =
            {[testenv:black]commands}
    ci:     {[testenv:ci-flake8]commands}
    !ci:    {[testenv:flake8]commands}


[testenv:black]
deps =
    black
commands = black --check .


[testenv:{,ci-}flake8]
allowlist_externals =
    rm
    mkdir
deps =
            flake8
            flake8-black
    ci:     flake8-html
    ci:     genbadge[all]
commands =
    ci:     rm -Rf {work_dir}{/}.reports{/}
    ci:     mkdir -p {work_dir}{/}.reports{/}html{/}flake8_report
            flake8 \
    ci:         --statistics \
    ci:         --tee \
    ci:         --output-file {work_dir}{/}.reports{/}flake8stats.txt \
    ci:         --format=html \
    ci:         --htmldir {work_dir}{/}.reports{/}html{/}flake8_report \
                .

    ci:     genbadge flake8 -s -i {work_dir}{/}.reports{/}flake8stats.txt -o {work_dir}{/}.reports{/}html{/}badges{/}flake8.svg


[flake8]
# Incompatibilities with Black
ignore = E203,W503
max-line-length = 88
builtins = __hermes__
extend-exclude = .*
per-file-ignores =
    __builtins__.pyi:E302,E305
    tests/unit/test_clients_errorqueue.py:E501


[testenv:{,ci-}py{310,311,312,313}]
setenv =
    !ci:    HERMESFUNCTIONALTESTS_DEBUGTMPDIR = {env_tmp_dir}{/}hermesfunctionaltests_debug
deps =
            -r requirements.txt
            -r requirements-devel.txt
            # Only set to test its installation :
            -r plugins/messagebus_consumers/kafka/requirements.txt
            -r plugins/messagebus_consumers/sqlite/requirements.txt
            -r plugins/datasources/ldap/requirements.txt
            -r plugins/datasources/sqlite/requirements.txt
            -r plugins/datasources/oracle/requirements.txt
            # Only set to test its installation :
            -r plugins/datasources/postgresql/requirements.txt
            # Only set to test its installation :
            -r plugins/clients/usersgroups_flatfiles_emails_of_groups/requirements.txt
            -r plugins/clients/usersgroups_null/requirements.txt
            # Only set to test its installation :
            -r plugins/clients/usersgroups_ldap/requirements.txt
            # Only set to test its installation :
            -r plugins/clients/usersgroups_adpypsrp/requirements.txt
            # Only set to test its installation :
            -r plugins/messagebus_producers/kafka/requirements.txt
            -r plugins/messagebus_producers/sqlite/requirements.txt
            -r plugins/attributes/ldapPasswordHash/requirements.txt
            -r plugins/attributes/crypto_RSA_OAEP/requirements.txt
    ci:     flake8-html
    ci:     genbadge[all]
    ci:     pytest-html
commands =
            python3 -m pytest tests/ \
    ci:         --cov-report=term \
    ci:         --cov-report=html:{work_dir}{/}.reports{/}html{/}coverage_report_{base_python} \
    ci:         --cov-report=xml:{work_dir}{/}.reports{/}cov_report_{base_python}.xml \
    ci:         --junitxml={work_dir}{/}.reports{/}junit_{base_python}.xml \
    ci:         --html={work_dir}{/}.reports{/}html{/}tests_reports/hermes_tests_{base_python}.html \
                --cov="clients" \
                --cov="lib" \
                --cov="plugins" \
                --cov="server"
    ci:     genbadge tests -s -n "tests {base_python}" -i {work_dir}{/}.reports{/}junit_{base_python}.xml -o {work_dir}{/}.reports{/}html{/}badges{/}tests_{base_python}.svg
    ci:     genbadge coverage -s -n "coverage {base_python}" -i {work_dir}{/}.reports{/}cov_report_{base_python}.xml -o {work_dir}{/}.reports{/}html{/}badges{/}coverage_{base_python}.svg


[testenv:tests]
setenv =
    HERMESFUNCTIONALTESTS_DEBUGTMPDIR = {env_tmp_dir}{/}hermesfunctionaltests_debug
deps = {[testenv:py313]deps}
commands =
    python3 -m pytest tests/ \
        --cov="clients" \
        --cov="lib" \
        --cov="plugins" \
        --cov="server"


[testenv:unittests]
deps = {[testenv:tests]deps}
commands =
    python3 -m pytest tests/unit/ \
        --cov="clients" \
        --cov="lib" \
        --cov="plugins" \
        --cov="server"


[testenv:functionaltests]
setenv =
    HERMESFUNCTIONALTESTS_DEBUGTMPDIR = {env_tmp_dir}{/}hermesfunctionaltests_debug
deps = {[testenv:tests]deps}
commands =
    python3 -m pytest tests/functional/ \
        --cov="clients" \
        --cov="lib" \
        --cov="plugins" \
        --cov="server"
